{"version":3,"sources":["components/calculator.js","index.js"],"names":["operatorClickedFlag","tempCalculationLine","dotPresentFlag","newCalculationFlag","divideClickedAlready","multiplyClickedAlready","plusClickedAlready","minusClickedAlready","Calculator","useState","calculationLine","setCalculationLine","operationLine","setOperationLine","clearOperatorsAlreadyClickedFlags","clearOperationLinesControlFlags","updateCalculationLine","numberClicked","Number","String","performCalculation","num","Math","round","EPSILON","console","log","className","type","id","maxLength","value","readOnly","onClick","includes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.32708a0c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nlet operatorClickedFlag = false;\r\nlet tempCalculationLine = 0;\r\nlet dotPresentFlag = false;\r\nlet newCalculationFlag = false;\r\nlet divideClickedAlready = false;\r\nlet multiplyClickedAlready = false;\r\nlet plusClickedAlready = false;\r\nlet minusClickedAlready = false;\r\n\r\nfunction Calculator() {\r\n  const [calculationLine, setCalculationLine] = useState(\"\");\r\n  const [operationLine, setOperationLine] = useState(\"\");\r\n\r\n  const clearOperatorsAlreadyClickedFlags = () => {\r\n    divideClickedAlready = false;\r\n    multiplyClickedAlready = false;\r\n    plusClickedAlready = false;\r\n    minusClickedAlready = false;\r\n  };\r\n  const clearOperationLinesControlFlags = () => {\r\n    newCalculationFlag = false;\r\n    operatorClickedFlag = false;\r\n    dotPresentFlag = false;\r\n  };\r\n  const initializeCalculator = () => {\r\n    setCalculationLine(() => setCalculationLine(\"\"));\r\n    setOperationLine(() => setOperationLine(\"\"));\r\n    clearOperationLinesControlFlags();\r\n    clearOperatorsAlreadyClickedFlags();\r\n    tempCalculationLine = 0;\r\n  };\r\n  const handleDivideButton = () => {\r\n    if (!divideClickedAlready) {\r\n      divideClickedAlready = true;\r\n      dotPresentFlag = false;\r\n      operatorClickedFlag = true;\r\n      setOperationLine(\"/\");\r\n      if (\r\n        !multiplyClickedAlready &&\r\n        !plusClickedAlready &&\r\n        !minusClickedAlready\r\n      ) {\r\n        performCalculation();\r\n      } else {\r\n        multiplyClickedAlready = false;\r\n        plusClickedAlready = false;\r\n        minusClickedAlready = false;\r\n      }\r\n    }\r\n  };\r\n  const handleMultiplyButton = () => {\r\n    if (!multiplyClickedAlready) {\r\n      multiplyClickedAlready = true;\r\n      dotPresentFlag = false;\r\n      operatorClickedFlag = true;\r\n      setOperationLine(\"*\");\r\n      if (\r\n        !divideClickedAlready &&\r\n        !plusClickedAlready &&\r\n        !minusClickedAlready\r\n      ) {\r\n        performCalculation();\r\n      } else {\r\n        divideClickedAlready = false;\r\n        plusClickedAlready = false;\r\n        minusClickedAlready = false;\r\n      }\r\n    }\r\n  };\r\n  const handlePlusButton = () => {\r\n    if (!plusClickedAlready) {\r\n      plusClickedAlready = true;\r\n      dotPresentFlag = false;\r\n      operatorClickedFlag = true;\r\n      setOperationLine(\"+\");\r\n      if (\r\n        !divideClickedAlready &&\r\n        !minusClickedAlready &&\r\n        !multiplyClickedAlready\r\n      ) {\r\n        performCalculation();\r\n      } else {\r\n        divideClickedAlready = false;\r\n        multiplyClickedAlready = false;\r\n        minusClickedAlready = false;\r\n      }\r\n    }\r\n  };\r\n  const handleMinusButton = () => {\r\n    if (!minusClickedAlready) {\r\n      minusClickedAlready = true;\r\n      dotPresentFlag = false;\r\n      operatorClickedFlag = true;\r\n      setOperationLine(\"-\");\r\n      if (\r\n        !divideClickedAlready &&\r\n        !plusClickedAlready &&\r\n        !multiplyClickedAlready\r\n      ) {\r\n        performCalculation();\r\n      } else {\r\n        divideClickedAlready = false;\r\n        multiplyClickedAlready = false;\r\n        plusClickedAlready = false;\r\n      }\r\n    }\r\n  };\r\n  const updateCalculationLine = (numberClicked) => {\r\n    clearOperatorsAlreadyClickedFlags();\r\n    if (newCalculationFlag) {\r\n      clearOperationLinesControlFlags();\r\n      tempCalculationLine = Number(calculationLine);\r\n      setCalculationLine(numberClicked);\r\n    } else {\r\n      if (!operatorClickedFlag) {\r\n        setCalculationLine(calculationLine + String(numberClicked));\r\n      } else {\r\n        tempCalculationLine = Number(calculationLine);\r\n        setCalculationLine(numberClicked);\r\n        operatorClickedFlag = false;\r\n      }\r\n    }\r\n  };\r\n  const performCalculation = () => {\r\n    let num = 0;\r\n    switch (operationLine) {\r\n      case \"+\":\r\n        num = Number(calculationLine) + tempCalculationLine;\r\n        setCalculationLine(Math.round((num + Number.EPSILON) * 10000) / 10000);\r\n        break;\r\n\r\n      case \"-\":\r\n        num = tempCalculationLine - Number(calculationLine);\r\n        setCalculationLine(Math.round((num + Number.EPSILON) * 10000) / 10000);\r\n        break;\r\n\r\n      case \"*\":\r\n        num = Number(calculationLine) * tempCalculationLine;\r\n        setCalculationLine(Math.round((num + Number.EPSILON) * 10000) / 10000);\r\n        break;\r\n\r\n      case \"/\":\r\n        num = tempCalculationLine / Number(calculationLine);\r\n        console.log(tempCalculationLine, calculationLine);\r\n        setCalculationLine(Math.round((num + Number.EPSILON) * 10000) / 10000);\r\n        break;\r\n      default:\r\n        setCalculationLine(Number(calculationLine));\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"calculationLine\">\r\n        <input\r\n          type=\"text\"\r\n          id=\"calculationLine-numeric\"\r\n          maxLength=\"10\"\r\n          value={calculationLine}\r\n          readOnly\r\n        ></input>\r\n        <input\r\n          type=\"text\"\r\n          id=\"calculationLine-sign\"\r\n          maxLength=\"1\"\r\n          value={operationLine}\r\n          readOnly\r\n        ></input>\r\n      </div>\r\n\r\n      <div className=\"calculator\">\r\n        <div>\r\n          <div className=\"zero-styling\">\r\n            <div className=\"column\">\r\n              <button onClick={() => initializeCalculator(\"AC\")}>AC</button>\r\n              <button onClick={() => updateCalculationLine(7)}>7</button>\r\n              <button onClick={() => updateCalculationLine(4)}>4</button>\r\n              <button onClick={() => updateCalculationLine(1)}>1</button>\r\n            </div>\r\n\r\n            <div className=\"column\">\r\n              <button\r\n                onClick={() => {\r\n                  if (Number(calculationLine) !== 0) {\r\n                    setCalculationLine(Number(calculationLine) * -1);\r\n                  }\r\n                }}\r\n              >\r\n                &plusmn;\r\n              </button>\r\n              <button onClick={() => updateCalculationLine(8)}>8</button>\r\n              <button onClick={() => updateCalculationLine(5)}>5</button>\r\n              <button onClick={() => updateCalculationLine(2)}>2</button>\r\n            </div>\r\n          </div>\r\n          <button\r\n            id=\"double-button\"\r\n            onClick={() => {\r\n              if (\r\n                calculationLine === \"\" ||\r\n                Number(calculationLine) !== 0 ||\r\n                operatorClickedFlag ||\r\n                /*  */\r\n                (typeof calculationLine === \"string\" &&\r\n                  calculationLine.includes(\".\"))\r\n\r\n                /* https://stackoverflow.com/questions/41820770/using-includes-method-in-a-function */\r\n              ) {\r\n                updateCalculationLine(0);\r\n              }\r\n            }}\r\n          >\r\n            0\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"column\">\r\n          <button\r\n            onClick={() => {\r\n              if (Number(calculationLine) !== 0) {\r\n                setCalculationLine(\r\n                  Math.round(\r\n                    (Number(calculationLine) + Number.EPSILON) * 10000\r\n                  ) / 1000000\r\n                );\r\n              }\r\n            }}\r\n          >\r\n            &#x25;\r\n          </button>\r\n          <button onClick={() => updateCalculationLine(9)}>9</button>\r\n          <button onClick={() => updateCalculationLine(6)}>6</button>\r\n          <button onClick={() => updateCalculationLine(3)}>3</button>\r\n          <button\r\n            onClick={() => {\r\n              if (!dotPresentFlag) {\r\n                dotPresentFlag = true;\r\n                updateCalculationLine(\".\");\r\n              }\r\n            }}\r\n          >\r\n            .\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"column\">\r\n          <button\r\n            onClick={() => {\r\n              handleDivideButton();\r\n            }}\r\n          >\r\n            &divide;\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              handleMultiplyButton();\r\n            }}\r\n          >\r\n            &times;\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              handleMinusButton();\r\n            }}\r\n          >\r\n            &minus;\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              handlePlusButton();\r\n            }}\r\n          >\r\n            &#x2b;\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              if (!operatorClickedFlag) {\r\n                newCalculationFlag = true;\r\n                performCalculation();\r\n                tempCalculationLine = 0;\r\n                setOperationLine(() => setOperationLine(\"\"));\r\n              }\r\n            }}\r\n          >\r\n            &#x3d;\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <footer>&copy; Copyright Amr Fouad 2020</footer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Calculator;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Calculator from './components/calculator.js'\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Calculator />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}